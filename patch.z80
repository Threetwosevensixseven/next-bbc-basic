;
; Title:	BBC Basic Interpreter - Z80 version
;		Patch file for Spectrum Next
; Author:	Dean Belfield
; Created:	02/05/2021
; Last Updated:	14/07/2021
;
; Modinfo:
; 09/05/2021:	Fixed plot mode and bug in COMDS table
; 10/05/2021:	Added RTC TIME$ and *TIME, moved some code into misc.z80, and changes due to VDU support
; 15/05/2021:	References to ASC_TO_HEX changed to ASC_TO_NUMBER in STAR commands; Updates for MODE command
; 17/05/2021:	Fixed bug in OSLINE; now returns 0; Added cursor to OSLINE; Added *EDIT; Tweaks for COLOUR, GCOL
; 18/05/2021:	Moved editor code into editor.z80
; 20/05/2021:	Fixed bugs in MOVE and PLOT
; 22/05/2021:	Fixed bugs in DRAW and OSKEY; Minor optimisations
; 23/05/2021:	Implemented *. and *CD 
; 24/05/2021:	Implemented OSLOAD and OSSAVE
; 25/05/2021:	Implemented more file IO commands
; 29/05/2021:	Bug fixes; Implemented *BYE
; 04/06/2021:	Added SOUND
; 08/06/2021:	Tweaked OSLINE EQU to reflect new module name
; 15/06/2021:	Plot, Draw, Move and Line now call Transform_Coords
; 05/07/2021:	Added OPT, OSOPEN, OSSHUT, OSBGET, OSBPUT, OSSTAT, GETPTR and PUTPTR
; 10/07/2021:	Fixed bug in PUTCSR and optimised PUTSCR and GETCSR; Modified GET_PORT and PUT
; 14/07/2021:	Implemented ADVAL, OSCALL and OSBYTE; Some KEY variables renamed

			MODULE PATCH

@GETIMS:		EQU	NEXT_RTC.GET_DATE_STRING	; Get the time string from the real-time clock module
@OSWRCH:		EQU	NEXT_IO.Print_Char		; Write a character out
@OSLINE			EQU 	EDITOR.Edit_Line		; Line editor

; MODE n: Set video mode
;
@MODE:			CALL    EXPRI
			EXX
			LD	A, L
			CALL	NEXT_GRAPHICS.Set_Video_Mode
			JP	XEQ

; CLG: clear the graphics screen
;
@CLG:			LD	A, 0x10
			CALL	OSWRCH 
			JP	XEQ

; CLRSCN: clears the screen.
;
@CLRSCN:		LD	A, 0x0C
			JP	OSWRCH

; PUTIME: set current time to DE:HL, in centiseconds.
;
@PUTIME:		LD	(TIME + 2), DE
			LD	(TIME + 0), HL
			RET

; GETIME: return current time in DE:HL, in centiseconds.
;
@GETIME:		LD	DE, (TIME + 2)
 	  		LD	HL, (TIME + 0)
			RET

; PUTCSR: move to cursor to x=DE, y=HL
;
@PUTCSR:		LD	D, L			; E: X, D: Y
			LD	(CHARPOS_X), DE
			RET

; GETCSR: return cursor position in x=DE, y=HL
;
@GETCSR:		LD	DE, (CHARPOS_X)		; E: X, D: Y
			LD	L, D 					
			LD	H, 0			; HL: Y
			LD	D, H 			; DE: X
			RET

; Read character from keyboard (blocking)
;
@OSRDCH:		LD	A, (KEY_CODE)	; Read keyboard
			OR	A 		
			JR	Z, OSRDCH	; Loop until key is pressed
			PUSH	AF
1:			LD	A, (KEY_CODE)	; And same again
			OR	A 
			JR	NZ, 1B 		; But loop until key is released
			POP 	AF  		; Return the keycode
			RET

; PROMPT: output the input prompt
;
@PROMPT: 		LD	A,'>'
			JP	OSWRCH

;OSKEY - Read key with time-limit, test for ESCape.
;Main function is carried out in user patch.
;   Inputs: HL = time limit (centiseconds)
;  Outputs: Carry reset if time-out
;           If carry set A = character
; Destroys: A,H,L,F
;
@OSKEY:			LD	A, (KEY_CODE)	; Read keyboard
			OR	A		; If we have a character
			JR	NZ, 1F		; Then process it
			LD	A,H		; Check if HL is 0 (this is passed by INKEY() function
			OR	L
			RET	Z 		; If it is then ret
			HALT			; Bit of a bodge so this is timed in ms
			DEC	HL 		; Decrement the counter and 
			JR	@OSKEY 		; loop
1:			CP	0x1B		; If we are not pressing ESC, 
			SCF 			; then flag we've got a character
			RET	NZ		
;
ESCSET: 		PUSH    HL
        		LD      HL,FLAGS
        		BIT     6,(HL)          ; ESC DISABLED?
        		JR      NZ,ESCDIS
        		SET     7,(HL)          ; SET ESCAPE FLAG
ESCDIS: 		POP     HL
        		RET	
;
ESCTEST:		LD	A, (KEY_CODE)
			CP	0x1B		; ESC	
			JR	Z,ESCSET
			RET
;
@TRAP:			CALL	ESCTEST
@LTRAP:			LD	A,(FLAGS)
			OR	A
			RET	P
			LD	HL,FLAGS 
			RES	7,(HL)
			JP	ESCAPE

;OSINIT - Initialise RAM mapping etc.
;If BASIC is entered by BBCBASIC FILENAME then file
;FILENAME.BBC is automatically CHAINed.
;   Outputs: DE = initial value of HIMEM (top of RAM)
;            HL = initial value of PAGE (user program)
;            Z-flag reset indicates AUTO-RUN.
;  Destroys: A,D,E,H,L,F
;
@OSINIT: 		XOR	A
         		CALL	NEXT_INIT.Reserve_UDG	; Reserve RAM for UDG; returns DE = RAMTOP
         		LD 	HL, @USER
			XOR	A
			LD	(@FLAGS), A		; Clear flags and set F = Z
         		RET	

;OSCALL - Intercept page &FF calls and provide an alternative address
;
;&FFF7:	OSCLI	Execute *command.
;&FFF4:	OSBYTE	Various byte-wide functions.
;&FFF1:	OSWORD	Various control block functions.
;&FFEE:	OSWRCH	Write character to output stream.
;&FFE7:	OSNEWL	Write NewLine to output stream.
;&FFE3:	OSASCI	Write character or NewLine to output stream.
;&FFE0:	OSRDCH	Wait for character from input stream.
;&FFDD:	OSFILE	Perform actions on whole files or directories.
;&FFDA:	OSARGS	Read and write information on open files or filing systems.
;&FFD7:	OSBGET	Read a byte from an a channel.
;&FFD4:	OSBPUT	Write a byte to a channel.
;&FFD1:	OSGBPB	Read and write blocks of data.
;&FFCE:	OSFIND	Open or close a file.
;
@OSCALL:		LD	HL, OSCALL_TABLE
1:			LD	A, (HL)
			INC	HL
			CP	0xFF
			RET	Z 
			CP	IYL
			JR	Z, 2F 
			RET	NC
			INC	HL 
			INC	HL 
			JR	1B 
2:			LD	A, (HL)
			LD	IYL, A 
			INC	HL 
			LD	A, (HL) 
			LD	IYH, A 
			RET
@OSCALL_TABLE:		DB 	0xD4: DW OSBPUT
			DB 	0xD7: DW OSBGET
			DB 	0xEE: DW OSWRCH
			DB	0xF4: DW OSBYTE
			DB	0xFF	

;OSCLI - Process an "operating system" command
;
@OSCLI: 		CALL    SKIPSP
			CP      CR
			RET     Z
			CP      '|'
			RET     Z
			CP      '.'
			JP      Z,STAR_DOT	; *.
			EX      DE,HL
			LD      HL,COMDS
OSCLI0:			LD      A,(DE)
			CALL    UPPRC
			CP      (HL)
			JR      Z,OSCLI2
			JR      C,HUH
OSCLI1:			BIT     7,(HL)
			INC     HL
			JR      Z,OSCLI1
			INC     HL
			INC     HL
			JR      OSCLI0
;
OSCLI2:			PUSH    DE
OSCLI3:			INC     DE
			INC     HL
			LD      A,(DE)
			CALL    UPPRC
			CP      '.'		; ABBREVIATED?
			JR      Z,OSCLI4
			XOR     (HL)
			JR      Z,OSCLI3
			CP      80H
			JR      Z,OSCLI4
			POP     DE
			JR      OSCLI1
;
OSCLI4:			POP     AF
		        INC     DE
OSCLI5:			BIT     7,(HL)
			INC     HL
			JR      Z,OSCLI5
			LD      A,(HL)
			INC     HL
			LD      H,(HL)
			LD      L,A
			PUSH    HL
			EX      DE,HL
			JP      SKIPSP

HUH:    		LD      A,254
        		CALL    EXTERR
        		DEFM    'Bad command'
        		DEFB    0

; ----------------------------------------------------------------------------

; OSCLI STAR commands

; Each command has bit 7 of the last character set, and is followed by the address of the handler
; It looks like these need to be in alphabetical order
;
COMDS:  		DC	'BYE':		DEFW STAR_BYE		; Soft reset
			DC	'CAT':		DEFW STAR_DOT		; Catalogue SD Card
			DC	'CD':		DEFW STAR_CD		; Change directory
			DC	'DELETE':	DEFW STAR_DELETE	; Delete a file
			DC	'DIR':		DEFW STAR_CD 		; Alias for CD
			DC	'DRIVE':	DEFW STAR_DRIVE		; Change drive
			DC	'ERASE':	DEFW STAR_DELETE	; Alias for DELETE
			DC	'FX':		DEFW STAR_FX		; FX commands
			DC	'LOAD':		DEFW STAR_LOAD		; Load memory block
			DC	'MEMDUMP': 	DEFW STAR_MEMDUMP	; Memory hex dump
			DC	'MKDIR':	DEFW STAR_MKDIR		; Make directory
			DC	'OPT':		DEFW STAR_OPT		;
			DC	'RMDIR':	DEFW STAR_RMDIR		; Remove directory
			DC	'SAVE':		DEFW STAR_SAVE		; Save memory block
			DC	'TEST': 	DEFW STAR_TEST		; Test code call for debugging new functions
			DC	'TIME': 	DEFW STAR_TIME		; RTC time
			DC	'TURBO':	DEFW STAR_TURBO		; CPU speed
			DB	0xFF

; OSCLI - BYE
;
STAR_BYE:		NEXTREG	0x02, 1		; Soft reset
			JR 	$		


; OSCLI - CAT / *.
;
STAR_DOT:		PUSH	IY
			LD	A, (FDRIVE)
			CALL	NEXT_DOS.LS
			POP	IY
			RET 

; OSCLI - CD path
;
STAR_CD:		LD	DE, NEXT_DOS.CD
STAR_CD_1:		CALL	SKIPSP
			PUSH	HL
			CALL	CRTONULL
			EXREG 	HL, IX
			LD	A, (FDRIVE)
			EX	DE, HL
			CALLREG	HL
			POP	HL
			JP	NULLTOCR

; OSCLI - DELETE path
;
STAR_DELETE:		LD	DE, NEXT_DOS.Delete
			JR	STAR_CD_1

; OSCLI - MKDIR path
;
STAR_MKDIR:		LD	DE, NEXT_DOS.MKDIR
			JR	STAR_CD_1

; OSCLI - RMDIR path
;
STAR_RMDIR:		LD	DE, NEXT_DOS.RMDIR
			JR	STAR_CD_1

; OSCLI - DRIVE d 
;
STAR_DRIVE:		CALL	SKIPSP
			LD	A, (HL)
			CP	CR
			RET	Z
			JP	NEXT_DOS.DRIVE

; OSCLI FX n
;
STAR_FX:		CALL	ASC_TO_NUMBER	; C: FX #
			LD	C, E
			CALL	ASC_TO_NUMBER	; B: First parameter
			LD	B, E
			CALL	ASC_TO_NUMBER	; E: Second parameter
			LD	L, B 		; L: First parameter
			LD	H, E 		; H: Second parameter
			LD	A, C 		; A: FX #, and fall through to OSBYTE
;
; OSBYTE
;  A: FX #
;  L: First parameter
;  H: Second parameter
;
OSBYTE:			CP	0x00
			JR	Z, OSBYTE_00
			CP	0x0B
			JR	Z, OSBYTE_0B
			CP	0x0C
			JR	Z, OSBYTE_0C
			CP	0x13
			JR	Z, OSBYTE_13
			CP	0x14
			JR	Z, OSBYTE_14
			CP	0x80
			JR	Z, OSBYTE_80
			JP 	HUH

; OSBYTE 0x00 (FX 0): Get OS version
;
OSBYTE_00:		LD	L, CONF_OSID	; ZX Spectrum Next OS code
			JP	EVAL.COUNT0 

; OSBYTE 0x0B (FX 11) Set keyboard auto-repeat delay
;
OSBYTE_0B:		LD	DE, KEY_DELAY
			JR	OSBYTE_0C_1

; OSBYTE 0x0C (FX 12) Set keyboard auto-repeat period
;
OSBYTE_0C:		LD	DE, KEY_REPEAT
OSBYTE_0C_1:		EX	DE, HL		; HL: Pointer to KEY_REPEAT or KEY_DELAY; E: New value
			LD	D, (HL)		;  D: Old value
			LD	(HL), E		; Store new value
			LD	L, D 		; Return old value
			JP	EVAL.COUNT0

; OSBYTE 0x13 (FX 19): Wait 1/50th of a second
;
OSBYTE_13:		HALT	
			LD	L, 0
			JP	EVAL.COUNT0

; OSBYTE 0x14 (FX 20,n): Explode/implode user defined character font RAM
;  L: n
;
OSBYTE_14:		LD	A, L
			CP	7
			JP	NC, HUH
			CALL	NEXT_INIT.Reserve_UDG
			LD	(HIMEM), DE
			LD	L, 0xFF
			JP	EVAL.COUNT0

; OSBYTE 0x80 (FX 80, device)
; ADVAL(device)
;
@ADVAL: 		INC	IY			; Skip '('
			CALL	EXPRI
			EXX
			CALL	BRAKET
;
OSBYTE_80:		LD	DE, EVAL.COUNT1		; Return address
			PUSH	DE
			LD	A, L 
			SUB	5
			JR	C, 1F
			CP	5
			JR	C, 2F
1:			LD	HL, 0
			RET			
2:			CALL	SWITCH_A
			DW	ADVAL_MOUSE_MAX_X	; ADVAL(5)
			DW	ADVAL_MOUSE_MAX_Y	; ADVAL(6)
			DW	ADVAL_MOUSE_X		; ADVAL(7)
			DW	ADVAL_MOUSE_Y		; ADVAL(8)
			DW	ADVAL_MOUSE_CLICK	; ADVAL(9)
;
ADVAL_MOUSE_MAX_X:	LD	HL, NEXT_MOUSE.Max_X
			RET
;
ADVAL_MOUSE_MAX_Y:	LD	HL, NEXT_MOUSE.Max_Y
			RET
;
ADVAL_MOUSE_X:		EQU	NEXT_MOUSE.Read_X
ADVAL_MOUSE_Y:		EQU	NEXT_MOUSE.Read_Y
;
ADVAL_MOUSE_CLICK:	CALL	NEXT_MOUSE.Read_Buttons
			LD	H, 0
			LD	L, A 
			RET

; OSCLI MEMDUMP addr, count
; 
STAR_MEMDUMP		CALL	ASC_TO_NUMBER	; Get start address
			PUSH	DE 
			CALL	ASC_TO_NUMBER	; Get length in DE
			POP	HL 		; Get start address in HL
			JP	NEXT_DEBUG.Memory_Dump

; OSCLI TEST
; Stick code to test here
;
STAR_TEST:		JP	HUH

; OSCLI TIME
; Output current time
;
STAR_TIME:		CALL	GETIMS
			EX	DE, HL 
			LD	(HL), LF
			INC	HL 
			LD	(HL), CR
			INC	HL
			LD	(HL), 0
			LD	HL, ACCS
			JP	MAIN.TEXT 	

; OSCLI TURBO n
; Set CPU Speed: 0 = 3.5Mhz, 1 = 7Mhz, 2 = 14Mhz, 3 = 28Mhz
;
STAR_TURBO:		CALL	ASC_TO_NUMBER
			LD	A, E 
			AND 	3
			LD	(CPU_SPEED), A
			NEXTREG	0x07, A 
			RET

; OSCLI LOAD file addr
;
STAR_LOAD:		CALL	SKIPSP		; First parameter is a string
			PUSH	HL		; Stack the string pointer
			CALL	SKIPNOTSP	; Skip to the next parameter
			CALL	ASC_TO_NUMBER	; DE: Address
			POP	HL		; HL: Pointer to Filename
			CALL	SPTONULL	; Convert to null terminated string
			PUSH	HL
			EXREG	HL, IX
			LD	BC, -1		; Maximum number of bytes
			LD	A, (FDRIVE)
			CALL	NEXT_DOS.Load
			POP	HL 
			RET

; OSCLI	SAVE file addr len
;
STAR_SAVE:		CALL	SKIPSP		; First parameter is a string
			PUSH	HL		; Stack the string pointer
			CALL	SKIPNOTSP	; Skip to the next parameter
			CALL	ASC_TO_NUMBER	; Read address
			PUSH	DE 
			CALL	ASC_TO_NUMBER	; Read length
			EXREG	DE, BC		; BC: Length
			POP	DE 		; DE: Start address
			POP	HL		; HL: Pointer to Filename
			CALL	SPTONULL	; Convert to null terminated string
			PUSH	HL
			EXREG	HL, IX
			LD	A, (FDRIVE)
			CALL	NEXT_DOS.Save
			POP	HL
			RET

; OSCLI OPT n
;
STAR_OPT:		CALL	ASC_TO_NUMBER
			LD	A, E 
			AND 	3
SETOPT:			LD	(OPTVAL), A 
			RET
;
@RESET:			XOR 	A 
			JR	SETOPT		

; ----------------------------------------------------------------------------

; PUT port,data
; Moved from exec.z80
; To write Nextreg port, OR port with &10000
;
@PUT:			CALL    EXPRI           ; Port address
			LD	A, L		; L is the high word of the port address; check for 1
			EXX
			PUSH	AF 
			PUSH    HL
			CALL    COMMA
			CALL    EXPRI           ; Data
			EXX
			POP     BC
			POP	AF 
			CP	0
			JR	Z, 1F 		; It's a Z80 port
			Z80PORT	0x243B, C 	; Select Nextreg port
			INC	B 
1:			OUT     (C),L           ; Output to Z80 port
			JP      XEQ

; GET(port) - Read Z80/Nextreg port
; GET(x, y) - Read character from screen position (x, y)
; Called from GET in eval.z80
; To read Nextreg port, OR port with &10000
;
@GET_PORT:		INC	IY		; Skip '('
			CALL    EXPRI           ; PORT ADDRESS
			LD	A, L 		; L is the high word of the port address; check for 1
			EXX
			PUSH	AF 
			PUSH	HL 
			CALL	NXT
			CP	","
			JR	NZ, 1F
;
; Get second parameter
;
			CALL	COMMA		
			CALL	EXPRI
			EXX 
			POP	DE 		; DE: X coordinate 
			POP	AF 		; AF: Not used
			LD	H, L		; H: Y coordinate
			LD	L, E		; L: X coordinate
			CALL	NEXT_IO.Get_Charpos_1
			CALL	NEXT_GRAPHICS.Get_Char
			LD	L, A		; Character code, or 0xFF if no match
			JR	C, 3F		; We have a character
			CALL	BRAKET		; Check for second bracket
			JP	EVAL.TRUE	; Return -1
;
; Read port
;
1:			POP	BC 		; Port # in BC
			POP	AF	
			CP	0
			JR	Z, 2F		; It's a Z80 port
			Z80PORT	0x243B, C 	; Select Nextreg port
			INC	B
2:			IN	L, (C)		; Read the value
3:			CALL	BRAKET
			JP	EVAL.COUNT0

; GET$(x, y) - Read character from screen position (x, y)
;
@GET_CHAR:		INC	IY
			CALL    EXPRI           ;Get X coordinate
			EXX
			PUSH	HL 		
			CALL	COMMA		
			CALL	EXPRI		;Get Y coordinate
			EXX 
			POP	DE 		;DE: X coordinate 
			LD	H, L		;H: Y coordinate
			LD	L, E		;L: X coordinate
			CALL	NEXT_IO.Get_Charpos_1
			CALL	NEXT_GRAPHICS.Get_Char
			EX	AF, AF
			CALL	BRAKET
			EX	AF, AF
			JP	EVAL.INKEY1 

; ----------------------------------------------------------------------------

; COLOUR col[,type]
; Set the text colour
;   col: 0-127 (foreground), 128-255 (backround)
;  type: 0: BBC spec (default)
;        1: foreground / ULA ink
;        2: background / ULA paper
;        3: border
;        4: ULA bright
;        5: ULA flash
;
@COLOUR:		CALL    EXPRI
			EXX
			PUSH	HL
			CALL	NXT 
			CP	","
			LD	L, 0		; Default type
			JR	NZ,1F
			CALL	COMMA		; Skip comma
			CALL	EXPRI		; Type
			EXX
1:			POP	BC		;  C: Colour
			LD	B, L		;  B: Type
			CALL	NEXT_GRAPHICS.Set_Text_Colour
			JP	XEQ 

; GCOL mode,colour[,type]
; As COLOUR
;
@GCOL:			CALL	EXPR_P2		; DE: mode, HL: colour
			LD	A, E 
			LD	(PLOT_MODE), A 
			PUSH	HL		; Stack the colour
			CALL	NXT 		; Is there a type parameter?
			CP	","
			LD	L, 0		; Default type
			JR	NZ,1F
			CALL	COMMA		; Skip comma
			CALL	EXPRI		; Type
			EXX
1:			POP	BC		;  C: Colour
			LD	B, L		;  B: Type
			CALL	NEXT_GRAPHICS.Set_Plot_Colour
			JP	XEQ 

; PLOT mode,x,y
;
@PLOT:			CALL	EXPRI		; Get the plot type (line, plot, etc)
			EXX
			PUSH	HL	
			CALL	COMMA 
			CALL	EXPR_P2		; DE: X, HL: Y
			CALL	NEXT_GRAPHICS.Transform_Coords
			POP	BC		; Plot type in C
			LD	A, C 		; Plot type in A
			PUSH	HL		; Y
			PUSH	DE		; X
			CALL	NEXT_GRAPHICS.Plot
@PLOT_1:		POP	DE 		
			POP	HL	
			CALL	MOVE_1
1:			JP	XEQ

; MOVE x, y
;
@MOVE:			CALL	EXPR_P2		; DE: X, HL: Y
			CALL	NEXT_GRAPHICS.Transform_Coords
			CALL	MOVE_1
			JP	XEQ
;
@MOVE_1:		LD	BC, (PLOTPOS_X)	; Store the previous plot points
			LD 	(PLOTPRE_X), BC 
			LD	BC, (PLOTPOS_Y)
			LD	(PLOTPRE_Y), BC
			LD	(PLOTPOS_X), DE	; And store the latest plot point
			LD	(PLOTPOS_Y), HL 
			RET

; DRAW x, y
;
@DRAW:			CALL	EXPR_P2		; DE: X, HL: Y
			CALL	NEXT_GRAPHICS.Transform_Coords
			CALL	NXT 		; Are there any more paramters?
			CP	","		
			JR	NZ, 1F		; No, so just do 'DRAW x, y'
			CALL	COMMA		; Okay, we're now doing 'DRAW x1,y1,x2,y2
			CALL	MOVE_1		; MOVE x1,y1 (DE, HL)
			CALL	EXPR_P2		; DE: X2, HL: Y2
			CALL	NEXT_GRAPHICS.Transform_Coords
1:			PUSH	HL 		; Stack X2
			PUSH	DE		; Stack Y2
			CALL	NEXT_GRAPHICS.Plot_Line
			JR	PLOT_1	

; POINT(x,y)
;
@POINT:			CALL	EXPR_P2		; DE: X, HL: Y
			CALL	NEXT_GRAPHICS.Transform_Coords
			CALL	NEXT_GRAPHICS.Point
			LD	L, A
1:			CALL	BRAKET
			JP      EVAL.COUNT0

; Get two values from EXPR in DE, HL
; IY: Pointer to expression string
; Returns:
; DE: P1
; HL: P2
;
@EXPR_P2:		CALL	EXPRI		; Get first parameter	
			EXX
			PUSH	HL
			CALL	COMMA 
			CALL	EXPRI		; Get second parameter
			EXX
			POP	DE
			RET

; ----------------------------------------------------------------------------

;OSLOAD - Load an area of memory from a file.
;   Inputs: HL addresses filename (CR terminated)
;           DE = address at which to load
;           BC = maximum allowed size (bytes)
;  Outputs: Carry reset indicates no room for file.
; Destroys: A,B,C,D,E,H,L,F
;
@OSLOAD:		CALL	CRTONULL
			PUSH	HL 
			POP	IX 
			LD	A, (FDRIVE)
			JP	NEXT_DOS.Load

;OSSAVE - Save an area of memory to a file.
;   Inputs: HL addresses filename (term CR)
;           DE = start address of data to save
;           BC = length of data to save (bytes)
; Destroys: A,B,C,D,E,H,L,F
;
@OSSAVE:		CALL	CRTONULL
			PUSH	HL 
			POP	IX 
			LD	A, (FDRIVE)
			JP	NEXT_DOS.Save

; ----------------------------------------------------------------------------

; OSOPEN
; HL: Pointer to path
;  F: C Z
;     x x OPENIN
; 	  OPENOUT
;     x	  OPENUP
; Returns:
;  A: Filehandle, 0 if cannot open
;
@OSOPEN:		LD	B, 0x01		; Mode: Read+Open
			JR	Z, 1F
			LD	B, 0x0A		; Mode: Write+Open/Create
			JR	C, 1F
			LD	B, 0x0E		; Mode: Write+Open/Create, Delete if Existing
1:			CALL	CRTONULL
			PUSH	HL
			POP	IX
			LD	A, (FDRIVE)
			JP	NEXT_DOS.FOPEN

;OSSHUT - Close disk file(s).
; E = file channel
;  If E=0 all files are closed (except SPOOL)
; Destroys: A,B,C,D,E,H,L,F
;
@OSSHUT:		LD	A, E 		; Will need to store file handles for close all
			OR	A
			RET	Z		
			JP	NEXT_DOS.FCLOSE

; OSBGET - Read a byte from a random disk file.
;  E = file channel
; Returns
;  A = byte read
;  Carry set if LAST BYTE of file: TODO
; Destroys: A,B,C,F
;
@OSBGET:		PUSH	HL
			CALL	NEXT_DOS.FREADB
			POP	HL
			OR	A		; Clear carry flag
			RET

; OSBPUT - Write a byte to a random disk file.
;  E = file channel
;  A = byte to write
; Destroys: A,B,C,F
;
@OSBPUT:		PUSH	DE
			PUSH	HL 
			CALL	NEXT_DOS.FWRITEB
			POP	HL
			POP	DE
			RET 

; OSSTAT - Read file status
;  E = file channel
; Returns
;  F: Z flag set - EOF
;  A: If Z then A = 0
; Destroys: A,D,E,H,L,F
;
@OSSTAT:		JP	NEXT_DOS.EOF

; GETPTR - Return file pointer.
;    E = file channel
; Returns:
; DEHL = pointer (0-&7FFFFF)
; Destroys: A,B,C,D,E,H,L,F
;
@GETPTR:		LD	A, E
			CALL	NEXT_DOS.GETPOS 
			EX	DE, HL		; BCDE -> BCHL
			LD	D, B 
			LD	E, C 		; BCHL -> DEHL
			RET

; PUTPTR - Update file pointer.
;    A = file channel
; DEHL = new pointer (0-&7FFFFF)
; Destroys: A,B,C,D,E,H,L,F
;
@PUTPTR:		LD	B, D		; DEHL -> BCHL
			LD	C, E
			EX	DE, HL		; BCHL -> BCDE
			PUSH	IX
			LD	IXL, 0x00	; Set
			CALL	NEXT_DOS.SEEK 
			POP	IX 
			RET 

; GETEXT - Find file size.
;    E = file channel
; Returns:
; DEHL = file size (0-&800000)
; Destroys: A,B,C,D,E,H,L,F
;
@GETEXT:		LD	A, E
			CALL	NEXT_DOS.FSTAT
			LD	L, (IX+7)
			LD	H, (IX+8)
			LD	E, (IX+9)
			LD	D, (IX+10)
			RET

; ----------------------------------------------------------------------------

; SOUND channel,volume,pitch,duration
; volume: 0 (off) to -15 (full volume)
; pitch: 0 - 255
; duration: -1 to 254 (duration in 20ths of a second, -1 = play forever)
;
@SOUND:			CALL	EXPR_P2		; DE: Channel/Control, HL: Volume
			LD	A, L 		;  A: Volume
			PUSH	AF 
			PUSH	DE
			CALL	COMMA
			CALL	EXPR_P2		; DE: Pitch, HL: Duration
			LD	D, E		;  D: Pitch
			LD	E, L 		;  E: Duration
			POP	HL 		; HL: Channel/Control
			POP	AF
			NEG
			LD	C, A 		;  C: Volume
			CALL	NEXT_SOUND.Queue_Note
			JP	XEQ

			ENDMODULE