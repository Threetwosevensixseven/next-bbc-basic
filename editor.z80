;
; Title:	BBC Basic for Spectrum Next - Editor
; Author:	Dean Belfield
; Created:	18/05/2021
; Last Updated:	19/05/2021
;
; Modinfo:
; 19/05/2021:	Added cursor up, cursor down, and copy

			MODULE NEXT_EDITOR

; Read/edit a complete line, terminated by CR.
;  HL: Addresses destination buffer. Must be on a page boundary
; Returns:
; Buffer filled, terminated by CR.
;   A: 0
; Destroys: A,BC,DE,HL,IX,F
;
Edit_Line:		LD	(HL), 0x0D		; Initialise buffer
			LD	IX, (CHARPOS_X)		; Current charpos
			LD	(CURSOR_X), IX		; Update cursor position
Edit_Line_Loop:		LD	A, 1
			CALL	Display_Cursor
2:			CALL	OSRDCH
			OR	A 
			JR	Z, 2B
			LD	C, A 			; Take a copy of the character
			XOR	A
			CALL	Display_Cursor
;
			LD	A, (FLAGS)		; Get the flags in B
			LD	B, A
			LD	DE, (CURSOR_X)		; Cursor position
;
			LD	A, C			; Check keyboard edit commands
			CP	0x7F			; 0x7F: DEL Delete
			JP	Z, Key_DEL
			SUB	0x08			; 0x08: BS Back one character
			JR	Z, Key_BS
			DEC	A			; 0x09: HT Advance one character
			JR	Z, Key_HT
			DEC	A			; 0x0A: LF Down one character
			JR	Z, Key_LF
			DEC	A			; 0x0B; VT Up one character
			JP	Z, Key_VT
			SUB	0x02			; 0x0D: CR Enter
			JR	Z, Key_CR
;
			BIT	4, B			; Are we in COPY mode?
			JR	NZ, Edit_Line_Loop	; Yes, so don't accept key input
;			
			LD	E, 0			; Get length of current line
			CALL	Get_Length
			LD	A, B 
			CP	255			
			JR	NC, Edit_Line_Loop	; Skip if line limit (255) exceeded
;
			CALL	Insert			; Insert the character into the buffer
			LD	(HL), C			; Store the character
			CALL	Update			; Update characters from cursor position
			INC	L
			CALL	Move_Cursor_L
			JR	Edit_Line_Loop

; Display the cursor
;  A: 0 - Hide, 1 - Show
;
Display_Cursor:		PUSH	HL
			LD	HL,(CURSOR_X)
			CALL 	NEXT_GRAPHICS.Display_Cursor
			POP	HL 
			RET

; Enter pressed
;
Key_CR:			LD	E, 0			; Move the cursor to the end of the line
			CALL	Get_Length
			LD	L, B 
			CALL	Move_Cursor_L
			LD	(CHARPOS_X), BC
			LD	A, (FLAGS)		; Reset the copy bit
			AND	%11101111
			LD	(FLAGS), A
			CALL	CRLF			; Display CRLF
			XOR	A			; Return A = 0
			RET  

; Cursor Left
;
Key_BS:			BIT	4, B			; Are we in COPY mode?
			JR	Z, 1F			
			DEC 	E 			; Yes, so just move the cursor
			LD	(CURSOR_X), DE
			JR	Edit_Line_Loop
1:			INC	L 			
			DEC	L 			; Check for cursor at beginning of line
			JR	Z, Edit_Line_Loop	; If we are, then do nothing
			DEC	L			; Move the cursor back
Key_Out:		LD	A, C
			CALL	OSWRCH			; Echo character back to terminal
			CALL	Move_Cursor_L
			JP	Edit_Line_Loop		; Loop

; Cursor Right
;
Key_HT:			BIT	4, B			; Are we in COPY mode?
			JR	Z, 1F		
Key_HT_1:		INC 	E 			; Yes, so just move the cursor
			LD	(CURSOR_X), DE
			JP	Edit_Line_Loop
1:			LD	A, (HL)			
			CP	0x0D			; Are we at the end of line? (marked with a CR)
			JP	Z, Edit_Line_Loop	; Yes, so do nothing
			INC	L			; Advance the cursor
			JR	Key_Out			; Echo character back to terminal			

; Cursor Down 
;
Key_LF:			BIT	4, B			; Are we in COPY mode?
			JR	Z, 1F			
			INC 	D 			; Yes, so just move the cursor
			LD	(CURSOR_X), DE
			JP	Edit_Line_Loop
1:			LD	E, 0			
			CALL	Get_Length 		; Get length of line in B from start of buffer (E=0)
			LD	A, L 			
			ADD	A, 32			; Down one line
			CP	B 			; Check with line length
			JR 	C, 2F			
			JP	NZ, Edit_Line_Loop
2:			LD 	L, A 
			JR	Key_Out			; Echo character back to terminal

; Cursor Up
;
Key_VT:			BIT	4, B			; Are we in COPY mode?
			JR	Z, 1F			
			DEC 	D 			; Yes, so just move the cursor
			LD	(CURSOR_X), DE
			JP	Edit_Line_Loop
1:			LD	A, L			; Get the line pointer
			SUB	32 			; Up one line
			JP	C, Edit_Line_Loop	; If it takes us past the beginning of the line then do nothing
			LD	L, A 			; Store
			JR	Key_Out			; Echo character back to terminal

; Delete
;
Key_DEL:		BIT	4, B			; Are we in COPY mode?
			JR	NZ, 2F			; Yes, so do copy
			INC	L			; Check for input ptr at beginning of line
			DEC	L 
			JR	Z, 1F
			CALL	Delete
			DEC	L
			CALL	Update
			LD	A, ' '
			CALL	OSWRCH
			CALL 	Move_Cursor_L
1:			JP	Edit_Line_Loop
2:			PUSH	DE
			PUSH	HL
			EX	DE, HL 
			CALL	NEXT_GRAPHICS.Get_Char
			POP	HL
			POP	DE
			JR	NC, 1B
			PUSH	DE
			CALL	Insert			; Insert the character into the buffer
			LD	(HL), C			; Store the character
			CALL	Update			; Update characters from cursor position
			INC	L
			POP	DE
			JR	Key_HT_1

; Get line length
;  E: Start pointer value in buffer
; Returns
;  B: Number of characters, excluding CR
;
Get_Length_From_Cursor:	LD	E, L
Get_Length:		LD	B, 0
			LD	D, H
1:			LD	A, (DE)
			CP	0x0D
			RET	Z 
			INC	B 
			INC	E
			JR	1B


; Move cursor
;  E: Cursor position
; Returns:
; BC: Cursor position
;
Move_Cursor_L:		LD	E, L
Move_Cursor_E:		LD	D, 0
			LD	A, IXL 			; Add existing cursor X offset
			ADD	DE, A 			; Number of chars to move cursor
			LD	A, E 			; Mask out X position
			AND 	31
			LD	C, A			; And store in C
			LD	B, 5			; Divide DE by 32
			BSRA	DE, B
			LD	A, E
			ADD	A, IXH 			; Add to existing cursor Y offset
			LD	B, A
			LD	(CURSOR_X), BC		; Store new cursor position
			RET 

; Update from cursor position
;  L: Cursor position
;
Update:			CALL	Move_Cursor_L
			LD	(CHARPOS_X), BC
			LD	D, H 
			LD	E, L
1:			LD	A, (DE)
			CP	0x0D
			RET	Z
			CALL	OSWRCH
			INC	E
			JR	1B

; Insert character
;  C: Character to insert
;  L: Cursor position
;
Insert:			CALL	Get_Length_From_Cursor	
			INC	B			; Need to loop at least once
1:			LD	A, (DE)
			INC	E
			LD	(DE), A 
			DEC	E 
			DEC	E
			DJNZ	1B
			RET

; Delete character
;  L: Cursor position
Delete:			CALL	Get_Length_From_Cursor
			INC	B
			LD	E, L
1:			LD	A, (DE)
			DEC	E 
			LD	(DE), A
			INC	E 
			INC 	E
			DJNZ	1B
			RET

			ENDMODULE