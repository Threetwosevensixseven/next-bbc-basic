;
; Title:	BBC Basic Interpreter - Z80 version
;		Spectrum Next DOS routines
; Author:	Dean Belfield
; Created:	06/05/2021
; Last Updated:	05/07/2021
;
; Notes:
;
; File Attributes
;
;  1 byte:  file/attributes (MS/DOS format)
;  ? bytes  file/directory name (null terminated)
;  2 bytes: timestamp (MS/DOS format)
;  2 bytes: datestamp (MS/DOS format)
;  4 bytes: filesize 
;
; Attribute Byte:
; 
; Bit 1: If set, the file/folder is hidden
; Bit 4: It's a directory
;
; Timestamps
;
; ╔═══════╦══════╦═════════════════════════════╦══════════════════════════════════╗
; ║ Bits  ║ Size ║         Description         ║             Comments             ║
; ╠═══════╬══════╬═════════════════════════════╬══════════════════════════════════╣
; ║ 0-4   ║    5 ║ Seconds (2-second interval) ║ 0..29 (29 represents 58 seconds) ║
; ║ 5-10  ║    6 ║ Minutes                     ║ 0..59                            ║
; ║ 11-15 ║    5 ║ Hour                        ║ 0..23                            ║
; ╠═══════╬══════╬═════════════════════════════╬══════════════════════════════════╣
; ║ 0-4   ║    5 ║ Day                         ║ 1..31                            ║
; ║ 5-9   ║    4 ║ Month                       ║ 1..12                            ║
; ║ 9-15  ║    7 ║ Year (as offset from 1980)  ║ 0 represents 1980                ║
; ╚═══════╩══════╩═════════════════════════════╩══════════════════════════════════╝
;
; Modinfo:
; 13/05/2021:	Switched to using EXSDOS calls via RST 08
; 23/05/2021:	Added CD and LS
; 24/05/2021:	Added Load and Save
; 25/05/2021:	Added Delete, MKDIR, RMDIR, DRIVE, Writes done at 28Mhz, error codes
; 05/07/2021:	Added FOPEN, FCLOSE, FREADB, GETPOS, SEEK

			MODULE	NEXT_DOS

m_dosversion		EQU	0x88
m_getsetdrv		EQU	0x89
m_gethandle		EQU     0x8D 
m_geterr		EQU     0x93			
m_p3dos			EQU     0x94				

f_open			EQU	0x9A
f_close                 EQU     0x9B
f_read			EQU	0x9D
f_write			EQU	0x9E
f_seek			EQU	0x9F
f_getpos		EQU	0xA0
f_fstat			EQU	0xA1
f_getdir		EQU	0xA8
f_setdir		EQU	0xA9
f_opendir		EQU	0xA3
f_readdir		EQU	0xA4
f_telldir		EQU	0xA5
f_seekdir		EQU	0xA6
f_rewinddir		EQU	0xA7
f_getcwd		EQU	0xA8
f_chdir			EQU	0xA9
f_mkdir			EQU	0xAA	
f_rmdir			EQU	0xAB
f_stat			EQU	0xAC
f_unlink		EQU	0xAD

fa_read			EQU	0x01
fa_append		EQU	0x06
fa_overwrite		EQU	0x0E

; Delete a file
;  A: Drive
; IX: Pointer to path
;
Delete:			NEXTREG	0x07, 3			; Boost the CPU speed
			CALLESX	f_unlink
			JP	C, Error
Restore_CPU:		LD	A, (CPU_SPEED)		; Restore CPU speed
			NEXTREG	0x07, A
			RET 

; Make directory
;  A: Drive
; IX: Pointer to path
;
MKDIR:			NEXTREG	0x07, 3			; Boost the CPU speed
			CALLESX	f_mkdir
			JP	C, Error
			JR	Restore_CPU 

; Remove directory
;  A: Drive
; IX: Pointer to path
;
RMDIR:			NEXTREG	0x07, 3			; Boost the CPU speed
			CALLESX	f_rmdir
			JP	C, Error
			JR	Restore_CPU

; Change current drive
;  A: Drive letter
;
DRIVE:			CP	"$"
			JR	Z, 1F
			SUB	'A'
			RET	C
			ADD	A, A 
			ADD	A, A 
			ADD	A, A 
			INC	A 
1:			LD	(FDRIVE), A
			CALLESX	m_getsetdrv
			JP	C, Error
			RET

; FOPEN
; IX: Pointer to path
;  A: Drive
;  B: Mode
; Returns:
;  A: Filehandle, 0 if cannot open
;
FOPEN:			NEXTREG	0x07, 3
			CALLESX	f_open
			JR	NC, 1F
			XOR	A
1:			PUSH	AF 
			LD	A, (CPU_SPEED)
			NEXTREG	0x07, A 
			POP	AF 
			RET 

; FCLOSE
;  E: Filehandle
;
FCLOSE:			NEXTREG	0x07, 3 
			LD	A, E
			CALLESX	f_close
			LD	A, (CPU_SPEED)
			NEXTREG	0x07, A 
			RET 

; FREADB
;  E: Filehandle
; Returns
;  A: Byte to read
;
FREADB:			NEXTREG	0x07, 3 
			LD	IX, FDATA		; 1 byte buffer for data
1:			LD	BC, 1
			PUSH	DE
			LD	A, E
			CALLESX	f_read
			POP	DE
			JR	C, 1B			; Loop until we've read a byte
			LD	A, (CPU_SPEED)
			NEXTREG	0x07, A 
			LD	A, (IX)
			RET

; FWRITEB
;  E: Filehandle
;  A: Byte to write
;
FWRITEB:		NEXTREG	0x07, 3 
			LD	IX, FDATA
			LD	(IX), A
			LD	BC, 1
			LD	A, E 
			CALLESX	f_write
			LD	A, (CPU_SPEED)
			NEXTREG	0x07, A 
			RET 

; EOF
;  E: Filehandle
; Returns
;  F: Z if EOF, otherwise NZ
;
EOF:			CALL	FREADB			; Try to read a byte
			LD	A, B 			; If # bytes read is zero
			OR	C 
			RET	Z			; Then it is probably end of file
			PUSH	AF			; Stack the flags
			NEXTREG	0x07, 3
			LD	A, E			; File handle
			LD	BC, 0			; Seek backwards 1 space
			LD	DE, 1
			LD	IXL, 2
			CALLESX	f_seek
			LD	A, (CPU_SPEED)
			NEXTREG	0x07, A 
			POP	AF			; Restore the flags
			RET

; GETPOS
;    A: Filehandle
; Returns
; BCDE: Current position
;    F: C if there is an error
;
GETPOS:			CALLESX	f_getpos
			RET 

; SEEK
;    A: Filehandle
; BCDE: Current position
;  IXL: Seek mode
;    F: C if there is an error
; 
SEEK:			CALLESX	f_seek
			RET

; FSTAT
;    A: Filehandle
; Returns
; IX+0: '*'
; IX+1; 0x81
; IX+2: File attributes (MS-DOS format)
; IX+3: Timestamp (2 bytes MS-DOS format)
; IX+5: Datestamp (2 bytes MS-DOS format)
; IX+7: Filesize in bytes (4 bytes)
;
FSTAT:			LD	IX, FDATA
			CALLESX	f_fstat
			RET	

; ----------------------------------------------------------------------------
			
; Load a file
;  A: Drive
; IX: Pointer to path
; DE: Load address
; BC: Maximum number of bytes to load
;
Load:			NEXTREG	0x07, 3			; Boost the CPU speed
			PUSH	BC
			PUSH	DE
			LD	B, 0x01			; Open for read
			CALLESX	f_open
			JP	NC, 1F			
			POP	DE			; Pop the stack
			POP	BC			; and
			JP	Error			; flag the error
;		
1:			LD	(FH), A			; Store the file handle
			POP	IX			; Get the address
			POP	BC			; And the length
			CALLESX	f_read 			; Read the data in
			JP	C, Error_Close		; Flag error if carry set
			SCF				; Set carry for BASIC (no error)
;
Close:			PUSH	AF			; Preserve the carry flag
			LD	A, (FH)
			CALLESX	f_close			; Close the file
			LD	A, (CPU_SPEED)		; Restore the CPU speed
			NEXTREG	0x07, A
			POP	AF
			RET 

; Save a file
;  A: Drive
; IX: Pointer to path
; DE: Start address
; BC: Length of data to save
;
Save:			NEXTREG	0x07, 3			; Boost the CPU speed
			PUSH	BC
			PUSH	DE
			LD	B, 0x06			; Open for write, error if exists
			CALLESX	f_open
			JP	NC, 1F
			POP	DE			; Pop the stakc
			POP	BC			; and
			JP	Error			; flag the error
;		
1:			LD	(FH), A			; Store the file handle
			POP	IX			; Get the address
			POP	BC			; And the length
			CALLESX	f_write			; Write the data
			JP	C, Error_Close		; Flag error if carry set
			JR	Close			; Okay at this point, just close

; Change directory
;  A: Drive
; IX: Pointer to path
;
CD:			CALLESX	f_chdir
			JP	C, Error		
			RET

; Read a directory
;  A: Drive
;
LS:			LD	IX, DOS_BUFFER
			CALLESX	f_getcwd 
			JP	C, Error

			LD	B, 0x00			; Access mode
			CALLESX	f_opendir		; Open the directory
			JP	C, Error		; Check for error
			LD	(FH), A 		; Store the handle	
;
1:			LD	IX, DOS_BUFFER		
			LD	A, (FH)			; Read the next directory entry
			CALLESX	f_readdir
			JP	C, Error_Close		; Check for error
			OR	A 
			JR	NZ, 2F			; If we have a file to read, then do it
;
			LD	A, (FH)			; Otherwise, close the file handle
			CALLESX	f_close			; and exit
			JP	C, Error
			RET
;
2:			BIT	1, (IX + 0)		; Check if hidden
			JR	NZ, 1B
;
			LD	A, 19: LD (CHARPOS_X), A
			PUSH	IX
			POP	HL
			INC	L
			CALL	MAIN.TEXT		; Print the filename
			PUSH	HL
			POP	IY			; IY now points to the timestamp
			XOR	A 
			LD	(CHARPOS_X), A
			LD	H, A
			LD	A, (IY + 3)		; Get the year byte
			RRA 
			LD	L, A
			ADD	HL, 1980		; Year offset
			CALL	MAIN.PBCD
			LD	A, "-"
			CALL	OSWRCH
;
			LD	A, (IY + 3)		; Get the month
			RRA 
			LD	A, (IY + 2)
			RRA 
			SWAPNIB
			AND	15
			CALL	PRINT_BCD
			LD	A, "-"
			CALL	OSWRCH
;
			LD	A, (IY + 2)		; And the day
			AND	31
			CALL	PRINT_BCD
;
			BIT	4, (IX + 0)		; Is it a folder?
			JR	NZ, 3F			; Yes, so skip next bit
;
			LD	E, (IY + 4)		; Byte 0 of the file length
			LD	D, (IY + 5)		; Byte 1
			LD	L, (IY + 6)		; Byte 2 
			LD	H, (IY + 7)		; Byte 3  
			CALL	HLDE_TO_FPP		; Convert to HLH'L' and C
			LD	DE, ACCS		; Buffer to output the ASCII number to
			LD	IX, STAVAR		; Used for the @% format variable
			CALL	FPP.STR			; Output to DE
			EX	DE, HL 
			LD	(HL), 0			; Null terminate the string
			LD	A, 7			; Right-align it
			SUB	L
			JR	C, 3F 
			ADD	A, 11
			LD	(CHARPOS_X), A
			LD	L, 0
			CALL	MAIN.TEXT		; And print it
;
3:			CALL	CRLF 
			JP	1B

;
; Error handlers
;
Error_Close:		CALL 	Close
Error:			LD	E, A			; Store the error
			LD	A, (CPU_SPEED)		; Restore the CPU speed
			NEXTREG	0x07, A
			LD	HL, Error_Codes		; Find the error
0:			LD	A, E			
1:			CP	(HL)
			JR	Z, 3F			; Found it!
			BIT	7, (HL)			; Is it the last entry?
			JR	NZ, 3F
2:			INC	HL
			LD	A, (HL)
			OR	A 
			JR	NZ, 2B
			INC	HL 
			JR	0B
3:			INC	HL
			PUSH	HL 
			XOR	A 
			JP	EXTERR

; Errors
;
Error_Codes:		DEFB	  5, "No such file or directory", 0
			DEFB	 11, "No such drive", 0
			DEFB	 16, "Is a directory", 0
			DEFB	 17, "Not a directory", 0
			DEFB	 18, "Already exists", 0
			DEFB	255, "Error", 0

			ENDMODULE